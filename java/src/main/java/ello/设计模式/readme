1.设计模式背后其实是7大设计原则。
  a.单一职责
  b.里氏替换原则
  c.依赖倒置原则
  d.开闭原则
  e.迪米特法则(最少知道原则)
  f.接口隔离原则
  g.组合优于继承原则


  单一职责（分：活字印刷，只该改变需要改变的。）每个方法、每个类、每个框架都只负责一件事。 如：Math.round(),只负责四舍五入。
  开闭原则：对扩展开放、对修改关闭。（增加新功能保证不想影响原功能）
  接口隔离：避免定义总接口，分成多个专门的接口
  依赖倒置（类图箭头方向反过来由此得名）：上层(调用)不能依赖与下层(被调用)，他们都应该依赖与抽象。（设计模式中的接口不仅指接口） service通过dao接口+dao工厂访问下层dao实现，在以后扩展dao实现，上层service不用改
  迪米特法则(封装)：一个类，对于其他类，知道的越少越好private。只和朋友通讯（朋友：a.方法的参数 b.方法的返回类型 c.方法内实例化的局部变量 d.类中的字段）
  里氏替换原则：在任何使用父类对象的地方，替换为子类对象以后，程序不会有问题出现。
  组合优于继承：如果父类和子类作者不是一个人，慎用继承。（父类作者不知道未来用户会重写什么方法，子类作者不知道作者在未来版本会改写什么方法）